#!/usr/bin/env python3
import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwppbXBvcnQgb3MKaW1wb3J0IHRpbWUKaW1wb3J0IHJlcXVlc3RzCmltcG9ydCBweWZpZ2xldApmcm9tIGJzNCBpbXBvcnQgQmVhdXRpZnVsU291cApmcm9tIHVybGxpYi5wYXJzZSBpbXBvcnQgdXJsam9pbiwgdXJscGFyc2UKZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgU3R5bGUsIGluaXQKCmluaXQoYXV0b3Jlc2V0PVRydWUpICAjIFBvdSBrb3Vsw6ggcmVzZXQgb3RvbWF0aWttYW4KCiMgRm9uY3Rpb24gcG91ciBhZmZpY2hlciB1biBtZXNzYWdlIEFTQ0lJIGNlbnRyw6kKZGVmIGFmZmljaGVyX21lc3NhZ2VfYXNjaWkoKToKICAgIG9zLnN5c3RlbSgiY2xzIiBpZiBvcy5uYW1lID09ICJudCIgZWxzZSAiY2xlYXIiKSAgIyBFZmZhY2VyIGwnw6ljcmFuCiAgICBjdXN0b21fZmlnID0gcHlmaWdsZXQuRmlnbGV0KGZvbnQ9InNtYWxsIikKICAgIGFzY2lpX2FydCA9IGN1c3RvbV9maWcucmVuZGVyVGV4dCgiIERlYWQgU2VjdXJpdHkgIERlZFNlYyIpCiAgICB0ZXJtaW5hbF93aWR0aCA9IG9zLmdldF90ZXJtaW5hbF9zaXplKCkuY29sdW1ucwogICAgZm9yIGxpbmUgaW4gYXNjaWlfYXJ0LnNwbGl0KCJcbiIpOgogICAgICAgIHByaW50KEZvcmUuUkVEICsgbGluZS5jZW50ZXIodGVybWluYWxfd2lkdGgpKQoKIyBGb25jdGlvbiBwb3VyIGFmZmljaGVyIHVuIGNvbXB0ZXVyIGRlIDEgw6AgMTAwCmRlZiBhZmZpY2hlcl9jb21wdGV1cigpOgogICAgcHJpbnQoIlxuIikKICAgIGZvciBpIGluIHJhbmdlKDEsIDEwMSk6CiAgICAgICAgcHJpbnQoRm9yZS5HUkVFTiArIGYiXHJDaGFyZ2VtZW50IDoge2l9JSIsIGVuZD0iIiwgZmx1c2g9VHJ1ZSkKICAgICAgICB0aW1lLnNsZWVwKDAuMDIpICAjIFRlbXBzIHLDqWR1aXQgcG91ciB1biBjaGFyZ2VtZW50IHBsdXMgcmFwaWRlCiAgICBwcmludChTdHlsZS5SRVNFVF9BTEwpCiAgICB0aW1lLnNsZWVwKDAuNSkKCiMgQ3LDqWVyIHVuZSBpbnRlcmZhY2UgQVNDSUkgYXJ0IGF2ZWMgcHlmaWdsZXQKZGVmIGRpc3BsYXlfaW50ZXJmYWNlKCk6CiAgICBjdXN0b21fZmlnID0gcHlmaWdsZXQuRmlnbGV0KGZvbnQ9InNtYWxsIikKICAgIGFzY2lpX2FydF90ZXh0ID0gY3VzdG9tX2ZpZy5yZW5kZXJUZXh0KCJEUy1jbG9uZSIpCiAgICBpbmZvID0gWwogICAgICAgICJCWTogODgwOCBhbmQgMTExMSIsCiAgICAgICAgIlRpa3RvazogZGVkc2VjX3guMCIsCiAgICAgICAgIllvdXR1YmU6IERlZHNlYyBhc3Npc3RhbnQiCiAgICBdCiAgICBib3JkZXIgPSAiPSIgKiA0MAogICAgcHJpbnQoRm9yZS5HUkVFTiArIGJvcmRlcikKICAgIHByaW50KEZvcmUuUkVEICsgYXNjaWlfYXJ0X3RleHQpCiAgICBmb3IgbGluZSBpbiBpbmZvOgogICAgICAgIHByaW50KEZvcmUuUkVEICsgZiIgIHtsaW5lfSIpCiAgICBwcmludChGb3JlLkdSRUVOICsgYm9yZGVyKQoKIyBUw6lsw6ljaGFyZ2VtZW50IGQndW4gZmljaGllcgpkZWYgdGVsZWNoYXJnZXJfZmljaGllcih1cmwsIGRvc3NpZXIsIGNvbXB0ZXVyKToKICAgIHRyeToKICAgICAgICBpZiB1cmwuc3RhcnRzd2l0aCgiZGF0YToiKSBvciB1cmwuc3RhcnRzd2l0aCgiamF2YXNjcmlwdDoiKToKICAgICAgICAgICAgcmV0dXJuIGNvbXB0ZXVyICAjIElnbm9yZXIgbGVzIFVSTHMgbm9uIEhUVFAKCiAgICAgICAgciA9IHJlcXVlc3RzLmdldCh1cmwsIHRpbWVvdXQ9MTApCiAgICAgICAgci5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgICBjaGVtaW4gPSB1cmxwYXJzZSh1cmwpLnBhdGgKICAgICAgICBub21fZmljaGllciA9IG9zLnBhdGguYmFzZW5hbWUoY2hlbWluKQoKICAgICAgICBpZiBub3Qgbm9tX2ZpY2hpZXI6CiAgICAgICAgICAgIGV4dCA9IG9zLnBhdGguc3BsaXRleHQoY2hlbWluKVsxXQogICAgICAgICAgICBub21fZmljaGllciA9IGYicmVzb3VyY2Vfe2NvbXB0ZXVyfXtleHR9IgogICAgICAgICAgICBjb21wdGV1ciArPSAxCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXh0ID0gb3MucGF0aC5zcGxpdGV4dChub21fZmljaGllcilbMV0KCiAgICAgICAgZXh0ZW5zaW9uc19hdXRvcmlzZWVzID0gWyIuaHRtbCIsICIuaHRtIiwgIi5jc3MiLCAiLmpzIiwgIi5qcGciLCAiLmpwZWciLCAiLnBuZyIsICIuZ2lmIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLnN2ZyIsICIuaWNvIiwgIi53ZWJwIiwgIi50dGYiLCAiLndvZmYiLCAiLndvZmYyIiwgIi5lb3QiLCAiLm1wNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIi5tcDMiLCAiLm9nZyIsICIuanNvbiJdCgogICAgICAgIGlmIGV4dCBhbmQgZXh0Lmxvd2VyKCkgaW4gZXh0ZW5zaW9uc19hdXRvcmlzZWVzOgogICAgICAgICAgICBjaGVtaW5fZmljaGllciA9IG9zLnBhdGguam9pbihkb3NzaWVyLCBub21fZmljaGllcikKICAgICAgICAgICAgd2l0aCBvcGVuKGNoZW1pbl9maWNoaWVyLCAid2IiKSBhcyBmOgogICAgICAgICAgICAgICAgZi53cml0ZShyLmNvbnRlbnQpCiAgICAgICAgICAgIHByaW50KEZvcmUuR1JFRU4gKyBmIltPS10gVMOpbMOpY2hhcmfDqSA6IHt1cmx9IikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChGb3JlLlJFRCArIGYiW0lHTk9Sw4ldIEV4dGVuc2lvbiBub24gYXV0b3Jpc8OpZSA6IHt1cmx9IikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChGb3JlLlJFRCArIGYiW0VSUkVVUl0gw4ljaGVjIGR1IHTDqWzDqWNoYXJnZW1lbnQge3VybH0gOiB7ZX0iKQogICAgcmV0dXJuIGNvbXB0ZXVyCgpkZWYgbWFpbigpOgogICAgYWZmaWNoZXJfbWVzc2FnZV9hc2NpaSgpCiAgICBhZmZpY2hlcl9jb21wdGV1cigpCiAgICBkaXNwbGF5X2ludGVyZmFjZSgpCgogICAgdXJsX3ByaW5jaXBhbGUgPSBpbnB1dCgiRW50cmV6IGwnVVJMIGNvbXBsw6h0ZSBkdSBzaXRlIMOgIGNsb25lciAoZXg6IGh0dHBzOi8vbW9uc2l0ZS5jb20pOiAiKS5zdHJpcCgpCiAgICBkb3NzaWVyX3NhdXZlZ2FyZGUgPSBpbnB1dCgiRW50cmV6IGxlIG5vbSBkdSBkb3NzaWVyIGRlIHNhdXZlZ2FyZGU6ICIpLnN0cmlwKCkKCiAgICBvcy5tYWtlZGlycyhkb3NzaWVyX3NhdXZlZ2FyZGUsIGV4aXN0X29rPVRydWUpCgogICAgdHJ5OgogICAgICAgIHJlcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsX3ByaW5jaXBhbGUpCiAgICAgICAgcmVwb25zZS5yYWlzZV9mb3Jfc3RhdHVzKCkKICAgICAgICBodG1sID0gcmVwb25zZS50ZXh0CiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAoaHRtbCwgImh0bWwucGFyc2VyIikKCiAgICAgICAgY2hlbWluX2luZGV4ID0gb3MucGF0aC5qb2luKGRvc3NpZXJfc2F1dmVnYXJkZSwgImluZGV4Lmh0bWwiKQogICAgICAgIHdpdGggb3BlbihjaGVtaW5faW5kZXgsICJ3IiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgICAgICAgICAgZi53cml0ZShodG1sKQoKICAgICAgICBwcmludChGb3JlLkdSRUVOICsgIltTQVVWRUdBUkRFXSBQYWdlIHByaW5jaXBhbGUgZW5yZWdpc3Ryw6llIGNvbW1lIGluZGV4Lmh0bWwiKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHByaW50KEZvcmUuUkVEICsgZiJbRVJSRVVSXSBQcm9ibMOobWUgbG9ycyBkdSB0w6lsw6ljaGFyZ2VtZW50IGRlIGxhIHBhZ2UgcHJpbmNpcGFsZSA6IHtlfSIpCiAgICAgICAgc291cCA9IEJlYXV0aWZ1bFNvdXAoIiIsICJodG1sLnBhcnNlciIpCgogICAgYmFsaXNlc19hdHRyaWJ1dHMgPSB7CiAgICAgICAgImxpbmsiOiAiaHJlZiIsCiAgICAgICAgInNjcmlwdCI6ICJzcmMiLAogICAgICAgICJpbWciOiAic3JjIiwKICAgICAgICAic291cmNlIjogInNyYyIsCiAgICAgICAgImlmcmFtZSI6ICJzcmMiLAogICAgICAgICJ2aWRlbyI6ICJzcmMiLAogICAgICAgICJhdWRpbyI6ICJzcmMiCiAgICB9CgogICAgdXJsc190ZWxlY2hhcmdlZXMgPSBzZXQoKQogICAgY29tcHRldXIgPSAxCgogICAgZm9yIGJhbGlzZSwgYXR0cmlidXQgaW4gYmFsaXNlc19hdHRyaWJ1dHMuaXRlbXMoKToKICAgICAgICBmb3IgZWxlbWVudCBpbiBzb3VwLmZpbmRfYWxsKGJhbGlzZSk6CiAgICAgICAgICAgIHVybF9maWNoaWVyID0gZWxlbWVudC5nZXQoYXR0cmlidXQpCiAgICAgICAgICAgIGlmIHVybF9maWNoaWVyOgogICAgICAgICAgICAgICAgdXJsX2NvbXBsZXRlID0gdXJsam9pbih1cmxfcHJpbmNpcGFsZSwgdXJsX2ZpY2hpZXIpCiAgICAgICAgICAgICAgICBpZiB1cmxfY29tcGxldGUgbm90IGluIHVybHNfdGVsZWNoYXJnZWVzOgogICAgICAgICAgICAgICAgICAgIGNvbXB0ZXVyID0gdGVsZWNoYXJnZXJfZmljaGllcih1cmxfY29tcGxldGUsIGRvc3NpZXJfc2F1dmVnYXJkZSwgY29tcHRldXIpCiAgICAgICAgICAgICAgICAgICAgdXJsc190ZWxlY2hhcmdlZXMuYWRkKHVybF9jb21wbGV0ZSkKCiAgICBwcmludChGb3JlLkJMVUUgKyBmIlxuW1RFUk1JTsOJXSBUb3VzIGxlcyBmaWNoaWVycyBvbnQgw6l0w6kgZW5yZWdpc3Ryw6lzIGRhbnMgOiB7ZG9zc2llcl9zYXV2ZWdhcmRlfSIpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=='))
